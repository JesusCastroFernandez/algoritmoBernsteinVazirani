from qiskit import *
import numpy as np

# Definici칩n de la funci칩n f
def f(secret_string, x):
    return np.dot(secret_string, x) % 2

# Definici칩n del circuito cu치ntico
def bv_algorithm(secret_string):
    n = len(secret_string)
    qr = QuantumRegister(n+1)
    cr = ClassicalRegister(n)
    circuit = QuantumCircuit(qr, cr)

    circuit.x(qr[n])
    circuit.h(qr[:n+1])

    for i in range(n):
        if secret_string[i] == 1:
            circuit.cx(qr[i], qr[n])

    circuit.h(qr[:n])
    circuit.measure(qr[:n], cr)

    return circuit

# Ejemplo de uso
secret_string = [1, 0, 1, 1]
circuit = bv_algorithm(secret_string)

backend = Aer.get_backend('qasm_simulator')
shots = 1024
results = execute(circuit, backend=backend, shots=shots).result()
counts = results.get_counts()

print("La cadena secreta es:", secret_string)
print("Los resultados obtenidos son:", counts)
